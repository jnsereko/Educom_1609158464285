/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN AdminActionsGenerated.js PLEASE EDIT ../AdminActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import AdminApi from "../../../api/AdminApi";

let actionsFunction = {

  //CRUD METHODS

  // Create admin
  createAdmin: function(admin) {
    return function(dispatch) {
      return AdminApi
        .createAdmin(admin)
        .then(admin => {
          dispatch(actionsFunction.createAdminSuccess(admin));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createAdminSuccess: function(admin) {
    return { type: types.CREATE_ADMIN_SUCCESS, payload: admin };
  },


  // Delete admin
  deleteAdmin: function(id) {
    return function(dispatch) {
      return AdminApi
        .deleteAdmin(id)
        .then(admin => {
          dispatch(actionsFunction.deleteAdminSuccess(admin));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteAdminSuccess: function(admin) {
    return { type: types.DELETE_ADMIN_SUCCESS, payload: admin };
  },


  // Find by email
  findByemail: function(key) {
    return function(dispatch) {
      return AdminApi
        .findByemail(key)
        .then(item => {
          dispatch(actionsFunction.findByemailSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByemailSuccess: function(item) {
    return { type: types.FINDBYEMAIL_ADMIN_SUCCESS, payload: item };
  },


  // Get admin
  loadAdmin: function(id) {
    return function(dispatch) {
      return AdminApi
        .getOneAdmin(id)
        .then(admin => {
          dispatch(actionsFunction.loadAdminSuccess(admin));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadAdminSuccess: function(admin) {
    return { type: types.GET_ADMIN_SUCCESS, payload: admin };
  },


  /*
  Name: findByIdOrEmailAndPassword
  Description: Method to get admin by his email or Id and password
  Params: 
    String emailOrId - admin email or id
    String password - admin password
  */
  findByIdOrEmailAndPassword: function(...params) {
    return function(dispatch) {
      return AdminApi
        .findByIdOrEmailAndPassword(params)
        .then( result => {
          dispatch(actionsFunction.findByIdOrEmailAndPasswordSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByIdOrEmailAndPasswordSuccess: function(result) {
    return { type: types.FINDBYIDOREMAILANDPASSWORD_ADMIN_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
